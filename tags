RAY_H	include/ray.h	/^#define RAY_H /;"	d
add_tupple	src/vector.c	/^t_tuple	add_tupple(t_tuple t1, t_tuple t2)$/;"	f	typeref:typename:t_tuple
clamp	src/ray.c	/^t_u	clamp(t_u nb)$/;"	f	typeref:typename:t_u
cofactor_matrix_3	src/matrix.c	/^t_u	cofactor_matrix_3(t_u m[3][3], int a, int b)$/;"	f	typeref:typename:t_u
cofactor_matrix_4	src/matrix.c	/^t_u	cofactor_matrix_4(t_u m[4][4], int a, int b)$/;"	f	typeref:typename:t_u
create_matrix_x	src/matrix.c	/^t_u	**create_matrix_x(int x)$/;"	f	typeref:typename:t_u **
create_null_tuple	src/vector.c	/^t_tuple	create_null_tuple(void)$/;"	f	typeref:typename:t_tuple
create_ray	src/ray.c	/^void	create_ray(t_ray *new, t_tuple p, t_tuple v)$/;"	f	typeref:typename:void
create_tuple	src/vector.c	/^t_tuple	create_tuple(t_u *array)$/;"	f	typeref:typename:t_tuple
create_tuple_copy	src/vector.c	/^t_tuple	create_tuple_copy(t_tuple t)$/;"	f	typeref:typename:t_tuple
create_v3	src/vector.c	/^t_tuple	create_v3(t_tuple p1, t_tuple p2)$/;"	f	typeref:typename:t_tuple
cross_product_v3	src/vector.c	/^t_tuple	cross_product_v3(t_tuple v1, t_tuple v2)$/;"	f	typeref:typename:t_tuple
det_matrix_2	src/matrix.c	/^t_u	det_matrix_2(t_u m[2][2])$/;"	f	typeref:typename:t_u
det_matrix_3	src/matrix.c	/^t_u	det_matrix_3(t_u m[3][3])$/;"	f	typeref:typename:t_u
det_matrix_4	src/matrix.c	/^t_u	det_matrix_4(t_u m[4][4])$/;"	f	typeref:typename:t_u
dot_product_v3	src/vector.c	/^t_u	dot_product_v3(t_tuple v1, t_tuple v2)$/;"	f	typeref:typename:t_u
fill_matrix_x	src/matrix.c	/^void	fill_matrix_x(t_u array[4][4], int sz, char *str)$/;"	f	typeref:typename:void
ft_sign	src/ray.c	/^int	ft_sign(t_u i)$/;"	f	typeref:typename:int
get_matrix_align_v1_v2	src/ray.c	/^void	get_matrix_align_v1_v2(t_u m[4][4], t_tuple v1, t_tuple v2)$/;"	f	typeref:typename:void
identity_matrix_4	src/matrix.c	/^void	identity_matrix_4(t_u new[4][4])$/;"	f	typeref:typename:void
init_inter	src/ray.c	/^void	init_inter(t_rt *rt)$/;"	f	typeref:typename:void
init_pixel	src/ray.c	/^void	init_pixel(t_rt *rt)$/;"	f	typeref:typename:void
intersect_obj	src/ray.c	/^void	intersect_obj(t_rt *rt, t_intersect *inter, int i, int j)$/;"	f	typeref:typename:void
invert_matrix_4	src/matrix.c	/^void	invert_matrix_4(t_u m[4][4], t_u new[4][4])$/;"	f	typeref:typename:void
length_v3	src/vector.c	/^t_u	length_v3(t_tuple v)$/;"	f	typeref:typename:t_u
main	src/main.c	/^int	main(void)$/;"	f	typeref:typename:int
matrix_4_is_invertible	src/matrix.c	/^t_bool	matrix_4_is_invertible(t_u m[4][4])$/;"	f	typeref:typename:t_bool
matrix_ex1	src/matrix.c	/^void	matrix_ex1(t_u new[4][4])$/;"	f	typeref:typename:void
matrix_ex2	src/matrix.c	/^void	matrix_ex2(t_u new[4][4])$/;"	f	typeref:typename:void
matrix_ex3	src/matrix.c	/^void	matrix_ex3(t_u new[3][3])$/;"	f	typeref:typename:void
matrix_ex4	src/matrix.c	/^void	matrix_ex4(t_u new[4][4])$/;"	f	typeref:typename:void
minor_matrix_3	src/matrix.c	/^t_u	minor_matrix_3(t_u m[3][3], int a, int b)$/;"	f	typeref:typename:t_u
mult_matrix_4	src/matrix.c	/^void	mult_matrix_4(t_u new[4][4], t_u m1[4][4], t_u m2[4][4])$/;"	f	typeref:typename:void
neg_tupple	src/vector.c	/^t_tuple	neg_tupple(t_tuple t)$/;"	f	typeref:typename:t_tuple
norm_v3	src/vector.c	/^void	norm_v3(t_tuple *v)$/;"	f	typeref:typename:void
pixel_raster_to_space	src/ray.c	/^void	pixel_raster_to_space(t_intersect *i, int x, int y, t_rt *rt)$/;"	f	typeref:typename:void
position	src/ray.c	/^void	position(t_tuple *new, t_ray r, t_tuple p)$/;"	f	typeref:typename:void
print_point_test4	src/test.c	/^void	print_point_test4(t_rt *rt, t_tuple pos)$/;"	f	typeref:typename:void
scale_v3	src/vector.c	/^void	scale_v3(t_tuple *v1, t_u s)$/;"	f	typeref:typename:void
solve_quadratic	src/ray.c	/^t_bool	solve_quadratic(t_intersect *inter, t_quadra q)$/;"	f	typeref:typename:t_bool
sub_matrix_3	src/matrix.c	/^void	sub_matrix_3(t_u m[3][3], int a, int b, t_u new[2][2])$/;"	f	typeref:typename:void
sub_matrix_3_1	src/matrix.c	/^void	sub_matrix_3_1(t_u m[3][3], t_u new[2][2], t_matex i)$/;"	f	typeref:typename:void
sub_matrix_4	src/matrix.c	/^void	sub_matrix_4(t_u m[4][4], int a, int b, t_u new[3][3])$/;"	f	typeref:typename:void
sub_matrix_4_1	src/matrix.c	/^void	sub_matrix_4_1(t_u m[4][4], t_u new[3][3], t_matex i)$/;"	f	typeref:typename:void
sub_tupple	src/vector.c	/^t_tuple	sub_tupple(t_tuple t1, t_tuple t2)$/;"	f	typeref:typename:t_tuple
test	src/test.c	/^void	test(t_rt *rt)$/;"	f	typeref:typename:void
test2	src/test.c	/^void	test2(t_rt *rt)$/;"	f	typeref:typename:void
test3	src/test.c	/^void	test3(t_rt *rt)$/;"	f	typeref:typename:void
test4	src/test.c	/^void	test4(t_rt *rt)$/;"	f	typeref:typename:void
test_sphere_init	src/ray.c	/^void	test_sphere_init(t_rt *rt)$/;"	f	typeref:typename:void
test_world_matrix	src/test.c	/^void	test_world_matrix(t_rt *rt)$/;"	f	typeref:typename:void
tick_environment	src/test.c	/^t_proj	tick_environment(t_proj proj, t_tuple gravity, t_tuple wind)$/;"	f	typeref:typename:t_proj
transpose_matrix_4	src/matrix.c	/^void	transpose_matrix_4(t_u m[4][4], t_u new[4][4])$/;"	f	typeref:typename:void
world_to_camera	src/ray.c	/^void	world_to_camera(t_rt *rt)$/;"	f	typeref:typename:void
