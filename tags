FALSE	include/miniRT.h	/^	FALSE,$/;"	e	enum:e_bool
MATRIX_H	include/matrix.h	/^#define MATRIX_H /;"	d
MINIRT_H	include/miniRT.h	/^# define MINIRT_H$/;"	d
TRUE	include/miniRT.h	/^	TRUE,$/;"	e	enum:e_bool
W_H	include/miniRT.h	/^# define W_H /;"	d
W_W	include/miniRT.h	/^# define W_W /;"	d
a	include/matrix.h	/^	int	a;$/;"	m	struct:s_matrix_index	typeref:typename:int
addr	include/miniRT.h	/^	char	*addr;$/;"	m	struct:s_img	typeref:typename:char *
b	include/matrix.h	/^	int	b;$/;"	m	struct:s_matrix_index	typeref:typename:int
bpp	include/miniRT.h	/^	int		bpp;$/;"	m	struct:s_img	typeref:typename:int
c	include/matrix.h	/^	int	c;$/;"	m	struct:s_matrix_index	typeref:typename:int
cofactor_matrix_3	src/matrix.c	/^t_decimal	cofactor_matrix_3(t_decimal m[3][3], int a, int b)$/;"	f	typeref:typename:t_decimal
cofactor_matrix_4	src/matrix.c	/^t_decimal	cofactor_matrix_4(t_decimal m[4][4], int a, int b)$/;"	f	typeref:typename:t_decimal
create_matrix_x	src/matrix.c	/^t_decimal	**create_matrix_x(int x)$/;"	f	typeref:typename:t_decimal **
d	include/matrix.h	/^	int	d;$/;"	m	struct:s_matrix_index	typeref:typename:int
det_matrix_2	src/matrix.c	/^t_decimal	det_matrix_2(t_decimal m[2][2])$/;"	f	typeref:typename:t_decimal
det_matrix_3	src/matrix.c	/^t_decimal	det_matrix_3(t_decimal m[3][3])$/;"	f	typeref:typename:t_decimal
det_matrix_4	src/matrix.c	/^t_decimal	det_matrix_4(t_decimal m[4][4])$/;"	f	typeref:typename:t_decimal
e_bool	include/miniRT.h	/^typedef	enum	e_bool$/;"	g
endian	include/miniRT.h	/^	int		endian;$/;"	m	struct:s_img	typeref:typename:int
fill_matrix_x	src/matrix.c	/^void	fill_matrix_x(t_decimal array[4][4], int sz, char *str)$/;"	f	typeref:typename:void
identity_matrix_m4	src/matrix.c	/^void	identity_matrix_m4(t_decimal new[4][4])$/;"	f	typeref:typename:void
img	include/miniRT.h	/^	t_img	*img;$/;"	m	struct:s_rt	typeref:typename:t_img *
img	include/miniRT.h	/^	void	*img;$/;"	m	struct:s_img	typeref:typename:void *
invert_matrix_4	src/matrix.c	/^void	invert_matrix_4(t_decimal m[4][4], t_decimal new[4][4])$/;"	f	typeref:typename:void
line_lgth	include/miniRT.h	/^	int		line_lgth;$/;"	m	struct:s_img	typeref:typename:int
matrix_4_is_invertible	src/matrix.c	/^t_bool	matrix_4_is_invertible(t_decimal m[4][4])$/;"	f	typeref:typename:t_bool
matrix_ex1	src/matrix.c	/^void	matrix_ex1(t_decimal new[4][4])$/;"	f	typeref:typename:void
matrix_ex2	src/matrix.c	/^void	matrix_ex2(t_decimal new[4][4])$/;"	f	typeref:typename:void
matrix_ex3	src/matrix.c	/^void	matrix_ex3(t_decimal new[3][3])$/;"	f	typeref:typename:void
matrix_ex4	src/matrix.c	/^void	matrix_ex4(t_decimal new[4][4])$/;"	f	typeref:typename:void
minor_matrix_3	src/matrix.c	/^t_decimal	minor_matrix_3(t_decimal m[3][3], int a, int b)$/;"	f	typeref:typename:t_decimal
mlx	include/miniRT.h	/^	void	*mlx;$/;"	m	struct:s_rt	typeref:typename:void *
mult_matrix_4	src/matrix.c	/^void	mult_matrix_4(t_decimal new[4][4], t_decimal m1[4][4], t_decimal m2[4][4])$/;"	f	typeref:typename:void
s_img	include/miniRT.h	/^typedef struct	s_img$/;"	s
s_matrix_index	include/matrix.h	/^typedef struct	s_matrix_index$/;"	s
s_rt	include/miniRT.h	/^typedef struct	s_rt$/;"	s
s_tuple	include/miniRT.h	/^typedef struct	s_tuple$/;"	s
sub_matrix_3	src/matrix.c	/^void	sub_matrix_3(t_decimal m[3][3], int a, int b, t_decimal new[2][2])$/;"	f	typeref:typename:void
sub_matrix_3_1	src/matrix.c	/^void	sub_matrix_3_1(t_decimal m[3][3], t_decimal new[2][2], t_matex i)$/;"	f	typeref:typename:void
sub_matrix_4	src/matrix.c	/^void	sub_matrix_4(t_decimal m[4][4], int a, int b, t_decimal new[3][3])$/;"	f	typeref:typename:void
sub_matrix_4_1	src/matrix.c	/^void	sub_matrix_4_1(t_decimal m[4][4], t_decimal new[3][3], t_matex i)$/;"	f	typeref:typename:void
t_bool	include/miniRT.h	/^}	t_bool;$/;"	t	typeref:enum:e_bool
t_decimal	include/miniRT.h	/^typedef double	t_decimal;$/;"	t	typeref:typename:double
t_img	include/miniRT.h	/^}	t_img;$/;"	t	typeref:struct:s_img
t_matex	include/matrix.h	/^}	t_matex;$/;"	t	typeref:struct:s_matrix_index
t_rt	include/miniRT.h	/^}	t_rt;$/;"	t	typeref:struct:s_rt
t_tuple	include/miniRT.h	/^}	t_tuple;$/;"	t	typeref:struct:s_tuple
test	src/test.c	/^void	test(t_rt *rt)$/;"	f	typeref:typename:void
test2	src/test.c	/^void	test2(t_rt *rt)$/;"	f	typeref:typename:void
test3	src/test.c	/^void	test3(t_rt *rt)$/;"	f	typeref:typename:void
tick_environment	src/test.c	/^t_proj	tick_environment(t_proj proj, t_tuple gravity, t_tuple wind)$/;"	f	typeref:typename:t_proj
trans_mat_4	src/transformations.c	/^void	trans_mat_4(t_decimal m[4][4], t_decimal x, t_decimal y, t_decimal z)$/;"	f	typeref:typename:void
transpose_matrix_4	src/matrix.c	/^void	transpose_matrix_4(t_decimal m[4][4], t_decimal new[4][4])$/;"	f	typeref:typename:void
trash	include/miniRT.h	/^	t_list	*trash;$/;"	m	struct:s_rt	typeref:typename:t_list *
w	include/miniRT.h	/^	t_decimal	w;$/;"	m	struct:s_tuple	typeref:typename:t_decimal
win	include/miniRT.h	/^	void	*win;$/;"	m	struct:s_rt	typeref:typename:void *
x	include/miniRT.h	/^	int		x;$/;"	m	struct:s_img	typeref:typename:int
x	include/miniRT.h	/^	t_decimal	x;$/;"	m	struct:s_tuple	typeref:typename:t_decimal
y	include/miniRT.h	/^	int		y;$/;"	m	struct:s_img	typeref:typename:int
y	include/miniRT.h	/^	t_decimal	y;$/;"	m	struct:s_tuple	typeref:typename:t_decimal
z	include/miniRT.h	/^	t_decimal	z;$/;"	m	struct:s_tuple	typeref:typename:t_decimal
